import {
  Base_default
} from "./chunk-XOKWLUBR.js";
import {
  CollectionEventType_default,
  Collection_default
} from "./chunk-WDVK5OSN.js";
import {
  State_default
} from "./chunk-WY5HO4B4.js";
import {
  EventType_default,
  ObjectEventType_default,
  listen,
  unlistenByKey
} from "./chunk-SYCD7RJA.js";
import {
  getIntersection
} from "./chunk-SHNWO6OU.js";
import {
  assign,
  clear
} from "./chunk-WONFBMYW.js";
import {
  assert,
  getUid
} from "./chunk-LO2Q3WRB.js";

// node_modules/ol/layer/Group.js
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Property = {
  LAYERS: "layers"
};
var LayerGroup = function(_super) {
  __extends(LayerGroup2, _super);
  function LayerGroup2(opt_options) {
    var _this = this;
    var options = opt_options || {};
    var baseOptions = assign({}, options);
    delete baseOptions.layers;
    var layers = options.layers;
    _this = _super.call(this, baseOptions) || this;
    _this.on;
    _this.once;
    _this.un;
    _this.layersListenerKeys_ = [];
    _this.listenerKeys_ = {};
    _this.addChangeListener(Property.LAYERS, _this.handleLayersChanged_);
    if (layers) {
      if (Array.isArray(layers)) {
        layers = new Collection_default(layers.slice(), { unique: true });
      } else {
        assert(typeof layers.getArray === "function", 43);
      }
    } else {
      layers = new Collection_default(void 0, { unique: true });
    }
    _this.setLayers(layers);
    return _this;
  }
  LayerGroup2.prototype.handleLayerChange_ = function() {
    this.changed();
  };
  LayerGroup2.prototype.handleLayersChanged_ = function() {
    this.layersListenerKeys_.forEach(unlistenByKey);
    this.layersListenerKeys_.length = 0;
    var layers = this.getLayers();
    this.layersListenerKeys_.push(listen(layers, CollectionEventType_default.ADD, this.handleLayersAdd_, this), listen(layers, CollectionEventType_default.REMOVE, this.handleLayersRemove_, this));
    for (var id in this.listenerKeys_) {
      this.listenerKeys_[id].forEach(unlistenByKey);
    }
    clear(this.listenerKeys_);
    var layersArray = layers.getArray();
    for (var i = 0, ii = layersArray.length; i < ii; i++) {
      var layer = layersArray[i];
      this.listenerKeys_[getUid(layer)] = [
        listen(layer, ObjectEventType_default.PROPERTYCHANGE, this.handleLayerChange_, this),
        listen(layer, EventType_default.CHANGE, this.handleLayerChange_, this)
      ];
    }
    this.changed();
  };
  LayerGroup2.prototype.handleLayersAdd_ = function(collectionEvent) {
    var layer = collectionEvent.element;
    this.listenerKeys_[getUid(layer)] = [
      listen(layer, ObjectEventType_default.PROPERTYCHANGE, this.handleLayerChange_, this),
      listen(layer, EventType_default.CHANGE, this.handleLayerChange_, this)
    ];
    this.changed();
  };
  LayerGroup2.prototype.handleLayersRemove_ = function(collectionEvent) {
    var layer = collectionEvent.element;
    var key = getUid(layer);
    this.listenerKeys_[key].forEach(unlistenByKey);
    delete this.listenerKeys_[key];
    this.changed();
  };
  LayerGroup2.prototype.getLayers = function() {
    return this.get(Property.LAYERS);
  };
  LayerGroup2.prototype.setLayers = function(layers) {
    this.set(Property.LAYERS, layers);
  };
  LayerGroup2.prototype.getLayersArray = function(opt_array) {
    var array = opt_array !== void 0 ? opt_array : [];
    this.getLayers().forEach(function(layer) {
      layer.getLayersArray(array);
    });
    return array;
  };
  LayerGroup2.prototype.getLayerStatesArray = function(opt_states) {
    var states = opt_states !== void 0 ? opt_states : [];
    var pos = states.length;
    this.getLayers().forEach(function(layer) {
      layer.getLayerStatesArray(states);
    });
    var ownLayerState = this.getLayerState();
    var defaultZIndex = ownLayerState.zIndex;
    if (!opt_states && ownLayerState.zIndex === void 0) {
      defaultZIndex = 0;
    }
    for (var i = pos, ii = states.length; i < ii; i++) {
      var layerState = states[i];
      layerState.opacity *= ownLayerState.opacity;
      layerState.visible = layerState.visible && ownLayerState.visible;
      layerState.maxResolution = Math.min(layerState.maxResolution, ownLayerState.maxResolution);
      layerState.minResolution = Math.max(layerState.minResolution, ownLayerState.minResolution);
      layerState.minZoom = Math.max(layerState.minZoom, ownLayerState.minZoom);
      layerState.maxZoom = Math.min(layerState.maxZoom, ownLayerState.maxZoom);
      if (ownLayerState.extent !== void 0) {
        if (layerState.extent !== void 0) {
          layerState.extent = getIntersection(layerState.extent, ownLayerState.extent);
        } else {
          layerState.extent = ownLayerState.extent;
        }
      }
      if (layerState.zIndex === void 0) {
        layerState.zIndex = defaultZIndex;
      }
    }
    return states;
  };
  LayerGroup2.prototype.getSourceState = function() {
    return State_default.READY;
  };
  return LayerGroup2;
}(Base_default);
var Group_default = LayerGroup;

export {
  Group_default
};
//# sourceMappingURL=chunk-HPCDVF3J.js.map

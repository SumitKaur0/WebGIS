import {
  Feature_default as Feature_default2,
  transformGeometryWithOptions
} from "./chunk-TKZBA3A2.js";
import {
  LineString_default
} from "./chunk-IYQ2DJLQ.js";
import {
  inflateCoordinates
} from "./chunk-UWSDB635.js";
import {
  Feature_default
} from "./chunk-5WDMOQCO.js";
import "./chunk-VMLPQBSK.js";
import {
  GeometryLayout_default,
  getStrideForLayout
} from "./chunk-5B47ZFCT.js";
import "./chunk-5NVPGE6J.js";
import {
  FormatType_default
} from "./chunk-DC2ZXGYS.js";
import "./chunk-AICCEPYZ.js";
import {
  get
} from "./chunk-SXOZVOGY.js";
import "./chunk-OBXCDSWS.js";
import "./chunk-IE72MASW.js";
import "./chunk-SYCD7RJA.js";
import "./chunk-SHNWO6OU.js";
import "./chunk-LZTVAMAD.js";
import "./chunk-WONFBMYW.js";
import {
  abstract,
  assert
} from "./chunk-LO2Q3WRB.js";

// node_modules/ol/format/TextFeature.js
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var TextFeature = function(_super) {
  __extends(TextFeature2, _super);
  function TextFeature2() {
    return _super.call(this) || this;
  }
  TextFeature2.prototype.getType = function() {
    return FormatType_default.TEXT;
  };
  TextFeature2.prototype.readFeature = function(source, opt_options) {
    return this.readFeatureFromText(getText(source), this.adaptOptions(opt_options));
  };
  TextFeature2.prototype.readFeatureFromText = function(text, opt_options) {
    return abstract();
  };
  TextFeature2.prototype.readFeatures = function(source, opt_options) {
    return this.readFeaturesFromText(getText(source), this.adaptOptions(opt_options));
  };
  TextFeature2.prototype.readFeaturesFromText = function(text, opt_options) {
    return abstract();
  };
  TextFeature2.prototype.readGeometry = function(source, opt_options) {
    return this.readGeometryFromText(getText(source), this.adaptOptions(opt_options));
  };
  TextFeature2.prototype.readGeometryFromText = function(text, opt_options) {
    return abstract();
  };
  TextFeature2.prototype.readProjection = function(source) {
    return this.readProjectionFromText(getText(source));
  };
  TextFeature2.prototype.readProjectionFromText = function(text) {
    return this.dataProjection;
  };
  TextFeature2.prototype.writeFeature = function(feature, opt_options) {
    return this.writeFeatureText(feature, this.adaptOptions(opt_options));
  };
  TextFeature2.prototype.writeFeatureText = function(feature, opt_options) {
    return abstract();
  };
  TextFeature2.prototype.writeFeatures = function(features, opt_options) {
    return this.writeFeaturesText(features, this.adaptOptions(opt_options));
  };
  TextFeature2.prototype.writeFeaturesText = function(features, opt_options) {
    return abstract();
  };
  TextFeature2.prototype.writeGeometry = function(geometry, opt_options) {
    return this.writeGeometryText(geometry, this.adaptOptions(opt_options));
  };
  TextFeature2.prototype.writeGeometryText = function(geometry, opt_options) {
    return abstract();
  };
  return TextFeature2;
}(Feature_default2);
function getText(source) {
  if (typeof source === "string") {
    return source;
  } else {
    return "";
  }
}
var TextFeature_default = TextFeature;

// node_modules/ol/geom/flat/flip.js
function flipXY(flatCoordinates, offset, end, stride, opt_dest, opt_destOffset) {
  var dest, destOffset;
  if (opt_dest !== void 0) {
    dest = opt_dest;
    destOffset = opt_destOffset !== void 0 ? opt_destOffset : 0;
  } else {
    dest = [];
    destOffset = 0;
  }
  var j = offset;
  while (j < end) {
    var x = flatCoordinates[j++];
    dest[destOffset++] = flatCoordinates[j++];
    dest[destOffset++] = x;
    for (var k = 2; k < stride; ++k) {
      dest[destOffset++] = flatCoordinates[j++];
    }
  }
  dest.length = destOffset;
  return dest;
}

// node_modules/ol/format/Polyline.js
var __extends2 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Polyline = function(_super) {
  __extends2(Polyline2, _super);
  function Polyline2(opt_options) {
    var _this = _super.call(this) || this;
    var options = opt_options ? opt_options : {};
    _this.dataProjection = get("EPSG:4326");
    _this.factor_ = options.factor ? options.factor : 1e5;
    _this.geometryLayout_ = options.geometryLayout ? options.geometryLayout : GeometryLayout_default.XY;
    return _this;
  }
  Polyline2.prototype.readFeatureFromText = function(text, opt_options) {
    var geometry = this.readGeometryFromText(text, opt_options);
    return new Feature_default(geometry);
  };
  Polyline2.prototype.readFeaturesFromText = function(text, opt_options) {
    var feature = this.readFeatureFromText(text, opt_options);
    return [feature];
  };
  Polyline2.prototype.readGeometryFromText = function(text, opt_options) {
    var stride = getStrideForLayout(this.geometryLayout_);
    var flatCoordinates = decodeDeltas(text, stride, this.factor_);
    flipXY(flatCoordinates, 0, flatCoordinates.length, stride, flatCoordinates);
    var coordinates = inflateCoordinates(flatCoordinates, 0, flatCoordinates.length, stride);
    var lineString = new LineString_default(coordinates, this.geometryLayout_);
    return transformGeometryWithOptions(lineString, false, this.adaptOptions(opt_options));
  };
  Polyline2.prototype.writeFeatureText = function(feature, opt_options) {
    var geometry = feature.getGeometry();
    if (geometry) {
      return this.writeGeometryText(geometry, opt_options);
    } else {
      assert(false, 40);
      return "";
    }
  };
  Polyline2.prototype.writeFeaturesText = function(features, opt_options) {
    return this.writeFeatureText(features[0], opt_options);
  };
  Polyline2.prototype.writeGeometryText = function(geometry, opt_options) {
    geometry = transformGeometryWithOptions(geometry, true, this.adaptOptions(opt_options));
    var flatCoordinates = geometry.getFlatCoordinates();
    var stride = geometry.getStride();
    flipXY(flatCoordinates, 0, flatCoordinates.length, stride, flatCoordinates);
    return encodeDeltas(flatCoordinates, stride, this.factor_);
  };
  return Polyline2;
}(TextFeature_default);
function encodeDeltas(numbers, stride, opt_factor) {
  var factor = opt_factor ? opt_factor : 1e5;
  var d;
  var lastNumbers = new Array(stride);
  for (d = 0; d < stride; ++d) {
    lastNumbers[d] = 0;
  }
  for (var i = 0, ii = numbers.length; i < ii; ) {
    for (d = 0; d < stride; ++d, ++i) {
      var num = numbers[i];
      var delta = num - lastNumbers[d];
      lastNumbers[d] = num;
      numbers[i] = delta;
    }
  }
  return encodeFloats(numbers, factor);
}
function decodeDeltas(encoded, stride, opt_factor) {
  var factor = opt_factor ? opt_factor : 1e5;
  var d;
  var lastNumbers = new Array(stride);
  for (d = 0; d < stride; ++d) {
    lastNumbers[d] = 0;
  }
  var numbers = decodeFloats(encoded, factor);
  for (var i = 0, ii = numbers.length; i < ii; ) {
    for (d = 0; d < stride; ++d, ++i) {
      lastNumbers[d] += numbers[i];
      numbers[i] = lastNumbers[d];
    }
  }
  return numbers;
}
function encodeFloats(numbers, opt_factor) {
  var factor = opt_factor ? opt_factor : 1e5;
  for (var i = 0, ii = numbers.length; i < ii; ++i) {
    numbers[i] = Math.round(numbers[i] * factor);
  }
  return encodeSignedIntegers(numbers);
}
function decodeFloats(encoded, opt_factor) {
  var factor = opt_factor ? opt_factor : 1e5;
  var numbers = decodeSignedIntegers(encoded);
  for (var i = 0, ii = numbers.length; i < ii; ++i) {
    numbers[i] /= factor;
  }
  return numbers;
}
function encodeSignedIntegers(numbers) {
  for (var i = 0, ii = numbers.length; i < ii; ++i) {
    var num = numbers[i];
    numbers[i] = num < 0 ? ~(num << 1) : num << 1;
  }
  return encodeUnsignedIntegers(numbers);
}
function decodeSignedIntegers(encoded) {
  var numbers = decodeUnsignedIntegers(encoded);
  for (var i = 0, ii = numbers.length; i < ii; ++i) {
    var num = numbers[i];
    numbers[i] = num & 1 ? ~(num >> 1) : num >> 1;
  }
  return numbers;
}
function encodeUnsignedIntegers(numbers) {
  var encoded = "";
  for (var i = 0, ii = numbers.length; i < ii; ++i) {
    encoded += encodeUnsignedInteger(numbers[i]);
  }
  return encoded;
}
function decodeUnsignedIntegers(encoded) {
  var numbers = [];
  var current = 0;
  var shift = 0;
  for (var i = 0, ii = encoded.length; i < ii; ++i) {
    var b = encoded.charCodeAt(i) - 63;
    current |= (b & 31) << shift;
    if (b < 32) {
      numbers.push(current);
      current = 0;
      shift = 0;
    } else {
      shift += 5;
    }
  }
  return numbers;
}
function encodeUnsignedInteger(num) {
  var value, encoded = "";
  while (num >= 32) {
    value = (32 | num & 31) + 63;
    encoded += String.fromCharCode(value);
    num >>= 5;
  }
  value = num + 63;
  encoded += String.fromCharCode(value);
  return encoded;
}
var Polyline_default = Polyline;

// dep:ol_format_Polyline
var ol_format_Polyline_default = Polyline_default;
export {
  decodeDeltas,
  decodeFloats,
  decodeSignedIntegers,
  decodeUnsignedIntegers,
  ol_format_Polyline_default as default,
  encodeDeltas,
  encodeFloats,
  encodeSignedIntegers,
  encodeUnsignedInteger,
  encodeUnsignedIntegers
};
//# sourceMappingURL=ol_format_Polyline.js.map

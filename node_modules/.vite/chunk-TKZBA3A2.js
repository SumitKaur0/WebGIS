import {
  Units_default,
  equivalent,
  get
} from "./chunk-SXOZVOGY.js";
import {
  assign
} from "./chunk-WONFBMYW.js";
import {
  abstract
} from "./chunk-LO2Q3WRB.js";

// node_modules/ol/format/Feature.js
var FeatureFormat = function() {
  function FeatureFormat2() {
    this.dataProjection = void 0;
    this.defaultFeatureProjection = void 0;
    this.supportedMediaTypes = null;
  }
  FeatureFormat2.prototype.getReadOptions = function(source, opt_options) {
    var options;
    if (opt_options) {
      var dataProjection = opt_options.dataProjection ? get(opt_options.dataProjection) : this.readProjection(source);
      if (opt_options.extent && dataProjection && dataProjection.getUnits() === Units_default.TILE_PIXELS) {
        dataProjection = get(dataProjection);
        dataProjection.setWorldExtent(opt_options.extent);
      }
      options = {
        dataProjection,
        featureProjection: opt_options.featureProjection
      };
    }
    return this.adaptOptions(options);
  };
  FeatureFormat2.prototype.adaptOptions = function(options) {
    return assign({
      dataProjection: this.dataProjection,
      featureProjection: this.defaultFeatureProjection
    }, options);
  };
  FeatureFormat2.prototype.getType = function() {
    return abstract();
  };
  FeatureFormat2.prototype.readFeature = function(source, opt_options) {
    return abstract();
  };
  FeatureFormat2.prototype.readFeatures = function(source, opt_options) {
    return abstract();
  };
  FeatureFormat2.prototype.readGeometry = function(source, opt_options) {
    return abstract();
  };
  FeatureFormat2.prototype.readProjection = function(source) {
    return abstract();
  };
  FeatureFormat2.prototype.writeFeature = function(feature, opt_options) {
    return abstract();
  };
  FeatureFormat2.prototype.writeFeatures = function(features, opt_options) {
    return abstract();
  };
  FeatureFormat2.prototype.writeGeometry = function(geometry, opt_options) {
    return abstract();
  };
  return FeatureFormat2;
}();
var Feature_default = FeatureFormat;
function transformGeometryWithOptions(geometry, write, opt_options) {
  var featureProjection = opt_options ? get(opt_options.featureProjection) : null;
  var dataProjection = opt_options ? get(opt_options.dataProjection) : null;
  var transformed;
  if (featureProjection && dataProjection && !equivalent(featureProjection, dataProjection)) {
    transformed = (write ? geometry.clone() : geometry).transform(write ? featureProjection : dataProjection, write ? dataProjection : featureProjection);
  } else {
    transformed = geometry;
  }
  if (write && opt_options && opt_options.decimals !== void 0) {
    var power_1 = Math.pow(10, opt_options.decimals);
    var transform = function(coordinates) {
      for (var i = 0, ii = coordinates.length; i < ii; ++i) {
        coordinates[i] = Math.round(coordinates[i] * power_1) / power_1;
      }
      return coordinates;
    };
    if (transformed === geometry) {
      transformed = geometry.clone();
    }
    transformed.applyTransform(transform);
  }
  return transformed;
}

export {
  Feature_default,
  transformGeometryWithOptions
};
//# sourceMappingURL=chunk-TKZBA3A2.js.map
